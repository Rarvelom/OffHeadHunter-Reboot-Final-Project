from datetime import datetime
from typing import List, Dict, Optional, Union
from pymongo import MongoClient
from dotenv import load_dotenv
import os
from typing import List, Dict, Optional, Union

# Load environment variables
load_dotenv()

# MongoDB connection
MONGODB_URI = os.getenv('MONGODB_URI')
client = MongoClient(MONGODB_URI)
db = client['offheadhunter_db']

class User:
    schema = {
        'email': str,
        'password_hash': str,
        'name': str,
        'preferences': {
            'desired_position': str,
            'salary_range': {
                'min': int,
                'max': int,
                'currency': str
            },
            'locations': List[{
                'country': str,
                'region': Optional[str],
                'city': Optional[str],
                'work_mode': str
            }],
            'job_sources': List[str]
        },
        'created_at': datetime,
        'last_login': Optional[datetime]
    }

class JobSource:
    schema = {
        'name': str,
        'base_url': str,
        'enabled': bool,
        'scraping_config': {
            'filters_supported': List[str],
            'selectors': Dict[str, str]
        }
    }

class JobOffer:
    schema = {
        'external_id': Optional[str],
        'source_id': str,
        'title': str,
        'company': str,
        'locations': List[{
            'country': str,
            'region': Optional[str],
            'city': Optional[str],
            'work_mode': str
        }],
        'description': str,
        'url': str,
        'posted_at': Optional[datetime],
        'scraped_at': datetime,
        'tags': List[str],
        'salary_range': {
            'min': Optional[int],
            'max': Optional[int],
            'currency': str,
            'period': str
        },
        'is_active': bool,
        'expires_at': Optional[datetime],
        'embedding': Optional[List[float]]
    }

class CVUpload:
    schema = {
        'user_id': str,
        'filename': str,
        'file_url': str,
        'original_text': str,
        'version': int,
        'vectorized': bool,
        'embedding': Optional[List[float]],
        'embedding_vector_id': Optional[str],
        'embedding_model': Optional[str],
        'uploaded_at': datetime
    }

class CVRewrite:
    schema = {
        'user_id': str,
        'original_cv_id': str,
        'job_offer_id': str,
        'content': str,
        'version': int,
        'generated_by': str,
        'created_at': datetime
    }

class JobMatch:
    schema = {
        'user_id': str,
        'job_offer_id': str,
        'score': float,
        'match_algorithm': str,
        'is_recommended': bool,
        'user_feedback': str,
        'matched_at': datetime,
        'last_updated': Optional[datetime]
    }

class Application:
    schema = {
        'user_id': str,
        'job_offer_id': str,
        'cv_rewrite_id': Optional[str],
        'status': str,
        'notes': Optional[str],
        'interview_date': Optional[datetime],
        'stage_history': List[{
            'status': str,
            'timestamp': datetime,
            'notes': Optional[str]
        }],
        'updated_at': datetime
    }

class Notification:
    schema = {
        'user_id': str,
        'type': str,
        'related_entity': {
            'entity_type': str,
            'entity_id': str
        },
        'message': str,
        'read': bool,
        'created_at': datetime
    }

class ActivityLog:
    schema = {
        'user_id': Optional[str],
        'action': str,
        'entity_type': str,
        'entity_id': Optional[str],
        'details': Dict,
        'timestamp': datetime
    }

class ChatHistory:
    schema = {
        'key': str,
        'chatHistory': List[{
            'role': str,
            'content': str
        }],
        '_id': Optional[str]  # This will be automatically generated by MongoDB
    }

class ChatMemory:
    schema = {
        '_id': Optional[str],  # MongoDB generated ObjectId
        'key': str,  # User identifier
        'chatHistory': List[{
            'role': str,  # 'user' or 'assistant'
            'content': str
        }]
    }

    # Indexes for efficient querying
    indexes = [
        {'key': 1},  # Single field index on key for quick user lookups
        {'key': 1, 'chatHistory.role': 1},  # Compound index for user-specific role queries
        {'chatHistory.role': 1, 'chatHistory.content': 1}  # Compound index for role and content queries
    ]

# Collections
users = db['users']
job_sources = db['job_sources']
job_offers = db['job_offers']
cv_uploads = db['cv_uploads']
cv_rewrites = db['cv_rewrites']
job_matches = db['job_matches']
applications = db['applications']
notifications = db['notifications']
activity_logs = db['activity_logs']
chat_history = db['chat_history']  # Keep old collection
chat_memory = db['chat_memory']  # Add new collection
